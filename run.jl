println_flush(io, x) = (println(io, x); flush(io))

function print_code(io, cmd)
    println_flush(io, "\n" * raw"```julia")
    r = run(pipeline(cmd, stdout = io, stderr = io); wait = false)
    wait(r)
    flush(io)
    println_flush(io, raw"```" * "\n")
end

julia_path(v) = "/Applications/Julia-$(v).app/Contents/Resources/julia/bin/julia"

let
    versions = ["1.1", "1.2", "1.3"]
    envs = [("ZygoteMaster", "Zygote master"), ("ZygoteRelease", "Zygote release")]
    methods = readdir("Methods")

    open("README.md", "w") do file
        println_flush(file, "# Attempts to differentiate `eigmin` in Julia\n")
        println_flush(file, "Generated by `run.jl`; uses OS-dependent paths that likely need to be updated.")
        for method in methods
            method_path = joinpath("Methods", method)
            println_flush(file, "\n## Method $method\n")
            println_flush(file, "Code:")
            print_code(file, `cat $method_path`)

            println_flush(file, "Results:")

            for (env, envname) in envs
                for version in versions
                    binary = julia_path(version)
                    println_flush(file, "\n### Julia $version, with $envname")
                    print_code(file, `$binary --project=$env $method_path`)                       
                end
            end
        end

        println_flush(file, "\n## Version information\n")
        for (env, envname) in envs
            for version in versions
                binary = julia_path(version)
                println_flush(file, "\n### Julia $version, with $envname\n")
                println_flush(file, "Version information:")
                print_code(file, `$binary --project=$env verinfo.jl`)
            end
        end
    end
end
